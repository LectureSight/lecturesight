package cv.lecturesight.display.impl;

import cv.lecturesight.display.Display;
import cv.lecturesight.display.DisplayPanel;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.pmw.tinylog.Logger;

public class DisplayUIPanel extends javax.swing.JPanel {

  private Display display;
  private DisplayPanel displayPanel;
  private String name;

  /**
   * Creates new form DisplayUIPanel
   */
  public DisplayUIPanel(String name) {
    this.name = name;
    // set operating system look-and-feel
    try {
      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    } catch (Exception e) {
      // bad luck
    }
    initComponents();
  }

  void setDisplay(Display display) {
    this.display = display;
    this.displayPanel = display.getDisplayPanel();
    displayPanel.setRecordingDir(name);
    Dimension size = display.getSize();
    this.setSize(size);
    this.setPreferredSize(size);
    displayHolder.setLayout(new BorderLayout());
    displayHolder.setBackground(Color.black);
    displayHolder.add(displayPanel, BorderLayout.CENTER);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    toolBar = new javax.swing.JToolBar();
    screenShotButton = new javax.swing.JButton();
    recordToggleButton = new javax.swing.JToggleButton();
    recordStatusLabel = new javax.swing.JLabel();
    displayHolder = new javax.swing.JPanel();

    setBackground(new java.awt.Color(1, 1, 1));

    toolBar.setRollover(true);

    screenShotButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/camera.png"))); // NOI18N
    screenShotButton.setToolTipText("Save current image to file");
    screenShotButton.setFocusable(false);
    screenShotButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    screenShotButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    screenShotButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        screenShotButtonActionPerformed(evt);
      }
    });
    toolBar.add(screenShotButton);

    recordToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/film_save.png"))); // NOI18N
    recordToggleButton.setFocusable(false);
    recordToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    recordToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    recordToggleButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        recordToggleButtonActionPerformed(evt);
      }
    });
    toolBar.add(recordToggleButton);
    toolBar.add(recordStatusLabel);

    javax.swing.GroupLayout displayHolderLayout = new javax.swing.GroupLayout(displayHolder);
    displayHolder.setLayout(displayHolderLayout);
    displayHolderLayout.setHorizontalGroup(
      displayHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );
    displayHolderLayout.setVerticalGroup(
      displayHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 269, Short.MAX_VALUE)
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
      .addComponent(displayHolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(displayHolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void screenShotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_screenShotButtonActionPerformed
    BufferedImage snapshot = display.getImage();
    JFileChooser chooser = new JFileChooser();
    FileNameExtensionFilter filter = new FileNameExtensionFilter("PNG Image", "png");
    chooser.setFileFilter(filter);
    if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
      File file = chooser.getSelectedFile();
      if (file.exists() && JOptionPane.NO_OPTION == JOptionPane.showConfirmDialog(
              this, "The file " + file.getName() + " already exists. Do you want to replace it?",
              "Replace file", JOptionPane.YES_NO_OPTION)) {
        return;
      }
      try {
        ImageIO.write(snapshot, "png", file);
      } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Failed to save snapshot:\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
      }
    }
  }//GEN-LAST:event_screenShotButtonActionPerformed

  private void recordToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordToggleButtonActionPerformed
    if (recordToggleButton.isSelected()) {
      File rdir = displayPanel.getRecordingDir();
      try {
        rdir.mkdirs();
      } catch (Exception e) {
        Logger.error("Unable to create capture directory -- Not starting capture.", e);
        return;
      }
      displayPanel.setRecording(true);
      recordStatusLabel.setText("Recodring to " + displayPanel.getRecordingDir().getPath());
    } else {
      displayPanel.setRecording(false);
      recordStatusLabel.setText("");
    }
  }//GEN-LAST:event_recordToggleButtonActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel displayHolder;
  private javax.swing.JLabel recordStatusLabel;
  private javax.swing.JToggleButton recordToggleButton;
  private javax.swing.JButton screenShotButton;
  private javax.swing.JToolBar toolBar;
  // End of variables declaration//GEN-END:variables
}
